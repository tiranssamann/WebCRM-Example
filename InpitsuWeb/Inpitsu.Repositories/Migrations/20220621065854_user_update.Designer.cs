// <auto-generated />
using System;
using Inpitsu.Repositories.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Inpitsu.Repositories.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220621065854_user_update")]
    partial class user_update
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Inpitsu.Data.Models.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("BankCardId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ContragentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BankCardId");

                    b.HasIndex("ContragentId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("Inpitsu.Data.Models.Address", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CountryID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DistrictID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("RegionID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CountryID");

                    b.HasIndex("DistrictID");

                    b.HasIndex("RegionID");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("Inpitsu.Data.Models.ApplicationFor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ContragentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreditTerm")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CurrencyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DateAccept")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EmployeeCount")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeCountWomen")
                        .HasColumnType("int");

                    b.Property<string>("GrasePeriod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PurposeOfFunding")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RejectString")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StatusApplication")
                        .HasColumnType("int");

                    b.Property<long?>("SumAccept")
                        .HasColumnType("bigint");

                    b.Property<long?>("SumNeed")
                        .HasColumnType("bigint");

                    b.Property<int?>("WorkCreate")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContragentId");

                    b.HasIndex("CurrencyId");

                    b.ToTable("ApplicationFor");
                });

            modelBuilder.Entity("Inpitsu.Data.Models.Attach", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ApplicationForId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Size")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationForId");

                    b.ToTable("Attaches");
                });

            modelBuilder.Entity("Inpitsu.Data.Models.BankCard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ContragentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DateActivate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateExp")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RealPan")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("TypeCard")
                        .HasColumnType("int");

                    b.Property<int?>("TypePaySystem")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContragentId");

                    b.ToTable("BankCards");
                });

            modelBuilder.Entity("Inpitsu.Data.Models.ComingDrug", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ContragentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DateOfComing")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameOfComing")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("ContragentId");

                    b.ToTable("ComingDrug");
                });

            modelBuilder.Entity("Inpitsu.Data.Models.Contact", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("Inpitsu.Data.Models.Contract", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid?>("ContragentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DateContract")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameContract")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ContragentId");

                    b.ToTable("Contracts");
                });

            modelBuilder.Entity("Inpitsu.Data.Models.Contragent", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AddressID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ContactID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("EmailID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("Inn")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("Pin")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AddressID");

                    b.HasIndex("ContactID");

                    b.HasIndex("EmailID");

                    b.ToTable("Contragents");
                });

            modelBuilder.Entity("Inpitsu.Data.Models.Country", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("Code")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("Inpitsu.Data.Models.Currency", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ISOCode")
                        .HasColumnType("int");

                    b.Property<string>("ISOCodeAlpha")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Currency");
                });

            modelBuilder.Entity("Inpitsu.Data.Models.Deal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.HasKey("Id");

                    b.ToTable("Deal");
                });

            modelBuilder.Entity("Inpitsu.Data.Models.DeliveryObject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ContragentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DayDelivery")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusDelivery")
                        .HasColumnType("int");

                    b.Property<double>("latitude")
                        .HasColumnType("float");

                    b.Property<double>("longitude")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ContragentId");

                    b.ToTable("DeliveryObjects");
                });

            modelBuilder.Entity("Inpitsu.Data.Models.District", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("Code")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("District");
                });

            modelBuilder.Entity("Inpitsu.Data.Models.Drug", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid?>("ComingDrugID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("ComingPrice")
                        .HasColumnType("float");

                    b.Property<double?>("ComingProcent")
                        .HasColumnType("float");

                    b.Property<int?>("Counts")
                        .HasColumnType("int");

                    b.Property<string>("Creator")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateOfExplotation")
                        .HasColumnType("datetime2");

                    b.Property<string>("FormCreations")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameOfDrug")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.Property<double>("Procent")
                        .HasColumnType("float");

                    b.Property<string>("SNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ComingDrugID");

                    b.ToTable("Drug");
                });

            modelBuilder.Entity("Inpitsu.Data.Models.Email", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Email_base");
                });

            modelBuilder.Entity("Inpitsu.Data.Models.Emails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid?>("EmailID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EmailString")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmailID");

                    b.ToTable("Emails");
                });

            modelBuilder.Entity("Inpitsu.Data.Models.Phones", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid?>("ContactID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PhoneString")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ContactID");

                    b.ToTable("Phones");
                });

            modelBuilder.Entity("Inpitsu.Data.Models.Process", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AuthorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<long?>("Current")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("Published")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Processes");
                });

            modelBuilder.Entity("Inpitsu.Data.Models.Region", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("Code")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Region");
                });

            modelBuilder.Entity("Inpitsu.Data.Models.Sex", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("Code")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Sex");
                });

            modelBuilder.Entity("Inpitsu.Data.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("Locked")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Inpitsu.Data.Models.Account", b =>
                {
                    b.HasOne("Inpitsu.Data.Models.BankCard", null)
                        .WithMany("Account")
                        .HasForeignKey("BankCardId");

                    b.HasOne("Inpitsu.Data.Models.Contragent", "Contragent")
                        .WithMany("Accounts")
                        .HasForeignKey("ContragentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contragent");
                });

            modelBuilder.Entity("Inpitsu.Data.Models.Address", b =>
                {
                    b.HasOne("Inpitsu.Data.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryID");

                    b.HasOne("Inpitsu.Data.Models.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictID");

                    b.HasOne("Inpitsu.Data.Models.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionID");

                    b.Navigation("Country");

                    b.Navigation("District");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("Inpitsu.Data.Models.ApplicationFor", b =>
                {
                    b.HasOne("Inpitsu.Data.Models.Contragent", "Contragent")
                        .WithMany()
                        .HasForeignKey("ContragentId");

                    b.HasOne("Inpitsu.Data.Models.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId");

                    b.Navigation("Contragent");

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("Inpitsu.Data.Models.Attach", b =>
                {
                    b.HasOne("Inpitsu.Data.Models.ApplicationFor", null)
                        .WithMany("Attach")
                        .HasForeignKey("ApplicationForId");
                });

            modelBuilder.Entity("Inpitsu.Data.Models.BankCard", b =>
                {
                    b.HasOne("Inpitsu.Data.Models.Contragent", "Contragent")
                        .WithMany("BankCards")
                        .HasForeignKey("ContragentId");

                    b.Navigation("Contragent");
                });

            modelBuilder.Entity("Inpitsu.Data.Models.ComingDrug", b =>
                {
                    b.HasOne("Inpitsu.Data.Models.Contragent", "Contragent")
                        .WithMany()
                        .HasForeignKey("ContragentId");

                    b.Navigation("Contragent");
                });

            modelBuilder.Entity("Inpitsu.Data.Models.Contract", b =>
                {
                    b.HasOne("Inpitsu.Data.Models.Contragent", "Contragent")
                        .WithMany("Contracts")
                        .HasForeignKey("ContragentId");

                    b.Navigation("Contragent");
                });

            modelBuilder.Entity("Inpitsu.Data.Models.Contragent", b =>
                {
                    b.HasOne("Inpitsu.Data.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressID");

                    b.HasOne("Inpitsu.Data.Models.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactID");

                    b.HasOne("Inpitsu.Data.Models.Email", "Email")
                        .WithMany()
                        .HasForeignKey("EmailID");

                    b.Navigation("Address");

                    b.Navigation("Contact");

                    b.Navigation("Email");
                });

            modelBuilder.Entity("Inpitsu.Data.Models.DeliveryObject", b =>
                {
                    b.HasOne("Inpitsu.Data.Models.Contragent", "Contragent")
                        .WithMany()
                        .HasForeignKey("ContragentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contragent");
                });

            modelBuilder.Entity("Inpitsu.Data.Models.Drug", b =>
                {
                    b.HasOne("Inpitsu.Data.Models.ComingDrug", "ComingDrug")
                        .WithMany("Drugss")
                        .HasForeignKey("ComingDrugID");

                    b.Navigation("ComingDrug");
                });

            modelBuilder.Entity("Inpitsu.Data.Models.Emails", b =>
                {
                    b.HasOne("Inpitsu.Data.Models.Email", null)
                        .WithMany("Emails")
                        .HasForeignKey("EmailID");
                });

            modelBuilder.Entity("Inpitsu.Data.Models.Phones", b =>
                {
                    b.HasOne("Inpitsu.Data.Models.Contact", null)
                        .WithMany("Phones")
                        .HasForeignKey("ContactID");
                });

            modelBuilder.Entity("Inpitsu.Data.Models.Process", b =>
                {
                    b.HasOne("Inpitsu.Data.Models.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId");

                    b.Navigation("Author");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Inpitsu.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Inpitsu.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Inpitsu.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Inpitsu.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Inpitsu.Data.Models.ApplicationFor", b =>
                {
                    b.Navigation("Attach");
                });

            modelBuilder.Entity("Inpitsu.Data.Models.BankCard", b =>
                {
                    b.Navigation("Account");
                });

            modelBuilder.Entity("Inpitsu.Data.Models.ComingDrug", b =>
                {
                    b.Navigation("Drugss");
                });

            modelBuilder.Entity("Inpitsu.Data.Models.Contact", b =>
                {
                    b.Navigation("Phones");
                });

            modelBuilder.Entity("Inpitsu.Data.Models.Contragent", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("BankCards");

                    b.Navigation("Contracts");
                });

            modelBuilder.Entity("Inpitsu.Data.Models.Email", b =>
                {
                    b.Navigation("Emails");
                });
#pragma warning restore 612, 618
        }
    }
}
